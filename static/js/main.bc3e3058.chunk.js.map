{"version":3,"sources":["Components/Wrapper.js","utils/randomIds.js","Components/Input/Input.presenter.js","Components/Input/Input.container.js","Components/TodoBin.js","Components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","main","_templateObject","randomId","randomLetter","String","fromCharCode","Math","floor","random","concat","Date","now","InputPresenter","input","Input_presenter_templateObject","InputContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","target","setState","value","handleKeyPress","_ref2","key","addTask","state","description","handleUpdate","react_default","a","createElement","Input_presenter","onChange","onKeyPress","Component","Container","div","TodoBin_templateObject","TodoCard","_templateObject2","TodoBin","id","children","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","dropabbleProps","placeholder","TodoItem_templateObject","TodoItem","todo","index","draggableId","TodoItem_Container","draggableProps","dragHandleProps","content","App","handleDragEnd","result","destination","source","newOrder","Array","from","order","splice","handleClick","newTodo","prevState","todos","objectSpread","defineProperty","toConsumableArray","xyz","_this$state","todoList","map","todoID","i","Components_TodoItem","Components_Wrapper","Input_container_InputContainer","onDragEnd","Components_TodoBin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc3e3058.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Wrapper = styled.main`\n  margin: auto;\n  width: 50%;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 1em; // both row and column gap\n\n  @media screen and (max-width: $break-small) {\n    width: 85vw;\n  }\n`\n\nexport default Wrapper;","/**\n * Generates a random ID based on a random character and the current time\n */\nexport const randomId = () => {\n  let randomLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  return `${randomLetter}-${Date.now()}`;\n}","import styled from 'styled-components';\n\nconst InputPresenter = styled.input`\n  height: 20px;\n  border: 1px solid #F6F8F8;\n  border-bottom: 1px solid #EC8B6E;\n  outline: none;\n  padding: 10px;\n  transition: box-shadow 1.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n\n  &:focus {\n    box-shadow: 0 0 10px #EC8B6E;\n    border: 1px solid #EC8B6E;\n  }\n`\n\nexport default InputPresenter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport InputPresenter from \"./Input.presenter\";\n\nexport default class InputContainer extends Component {\n\n    static propTypes = {\n        handleUpdate: PropTypes.func.isRequired\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            value: \"\"\n        }\n    }\n\n    /**\n     * The typical onChange handler for inputs\n     *\n     */\n    handleChange = ({target}) => {\n        this.setState({\n            value: target.value\n        });\n    };\n\n    /**\n     * Triggers the addTask method when the \"Enter\" key\n     * is pressed\n     *\n     */\n    handleKeyPress = ({key}) => {\n        if(key === \"Enter\"){\n            this.addTask(this.state.value);\n            this.setState({\n                value: \"\"\n            });\n        }\n    };\n\n    /**\n     * Sends a POST request to the API with a description\n     * of the task as the body. It then triggers the update\n     * handler for the parent so that the List can be updated\n     *\n     * @param {string} description\n     */\n    addTask = (description) => {\n        this.props.handleUpdate(description);\n    };\n\n    render(){\n        return(\n            <InputPresenter\n                value={this.state.value}\n                onChange={this.handleChange}\n                onKeyPress={this.handleKeyPress}\n            />\n        )\n    }\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Droppable} from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n  display: inline-block;\n  padding: 5px 20px;\n  border: 1px solid lightgray;\n`\n\nconst TodoCard = styled.div`\n  padding: 10px;\n`\nconst TodoBin = ({id, children}) => (\n  <Container>\n    <Droppable droppableId={id} >\n      {provided => (\n        <TodoCard\n          ref={provided.innerRef}\n          {...provided.dropabbleProps}\n        >\n          {children}\n          {provided.placeholder}\n        </TodoCard>\n      )}\n    </Droppable>\n  </Container>\n)\n\nTodoBin.propTypes = {\n  id: PropTypes.string.isRequired\n}\n\nexport default TodoBin;","import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n  border-radius: 4px;\n  margin: 10px 0;\n  padding: 10px 10px;\n  background: #EC8B6E;\n  color: white;\n  width: 100%;\n  overflow: hidden;\n  box-shadow: 0px 6px 8px rgba(164, 164, 164, 0.213825);\n  border-radius: 3px;\n`\n\nconst TodoItem = ({todo, index}) => (\n  <Draggable\n    draggableId={todo.id} index={index}\n  >\n    {provided => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n      >\n        {todo.content}\n      </Container>\n    )}\n  </Draggable>\n)\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    content: PropTypes.string\n  }),\n  index: PropTypes.number\n};\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport Wrapper from './Components/Wrapper'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { randomId } from './utils/randomIds';\nimport InputContainer from './Components/Input/Input.container';\nimport TodoBin from './Components/TodoBin'\nimport TodoItem from './Components/TodoItem'\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: {\n        \"xyz\": { id: \"xyz\", content: \"Finish todo app\" }\n      },\n      order: [\"xyz\"],\n    };\n  }\n\n  handleDragEnd = result => {\n    const { draggableId, destination, source } = result;\n    if (!destination) return null;\n    if (destination.index === source.index) return;\n    let newOrder = Array.from(this.state.order);\n    newOrder.splice(source.index, 1);\n    newOrder.splice(destination.index, 0, draggableId);\n    this.setState({\n      order: newOrder\n    });\n  }\n\n  handleClick = () => {\n    this.setState({\n      id: randomId()\n    })\n  };\n\n  handleUpdate = content => {\n    const newTodo = {\n      id: randomId(),\n      content\n    }\n\n    this.setState(prevState => ({\n      todos: {\n        ...prevState.todos,\n        [newTodo.id]: newTodo\n      },\n      order: [newTodo.id, ...prevState.order]\n    }))\n  };\n\n  render() {\n    const { todos, order } = this.state;\n    const todoList = order.map((todoID, i) => <TodoItem todo={todos[todoID]} index={i} key={todoID}/> );\n    return (\n      <Wrapper>\n        <h1>What are your plans for today?</h1>\n        <InputContainer handleUpdate={this.handleUpdate}/>\n        <DragDropContext\n          onDragEnd={this.handleDragEnd}\n        >\n          <TodoBin id=\"todos-1\">\n            {todoList}\n          </TodoBin>\n        </DragDropContext>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}