{"version":3,"sources":["Components/Wrapper.js","utils/randomIds.js","Components/Input/Input.presenter.js","Components/Input/InputSkin.js","Components/Input/Input.container.js","Components/TodoBin.js","Components/TodoItem.js","Components/Container.js","utils/theme.config.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","main","_templateObject","props","theme","bg","contrast","defaultProps","randomId","randomLetter","String","fromCharCode","Math","floor","random","concat","Date","now","InputPresenter","input","Input_presenter_templateObject","InputSkin","div","InputSkin_templateObject","active","secondary","InputContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","_ref","target","setState","value","handleKeyPress","_ref2","key","addTask","state","description","handleUpdate","handleFocus","handleBlur","react_default","a","createElement","Input_InputSkin","Input_presenter","onChange","onKeyPress","onFocus","onBlur","placeholder","Component","Container","TodoBin_templateObject","TodoBin","id","children","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","dropabbleProps","TodoItem_templateObject","fontColor","TodoItem","todo","index","draggableId","TodoItem_Container","draggableProps","dragHandleProps","content","Container_templateObject","primary","tertiary","App","handleDragEnd","result","destination","source","newOrder","Array","from","order","splice","handleClick","newTodo","prevState","todos","objectSpread","defineProperty","toConsumableArray","xyz","_this$state","todoList","map","todoID","i","Components_TodoItem","console","log","styled_components_browser_esm","Components_Wrapper","Components_Container","Input_container_InputContainer","onDragEnd","Components_TodoBin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4558193d.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Wrapper = styled.main`\n  display: flex;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  background: ${props => props.theme.bg};\n  height: 100vh;\n  * {\n    color: ${props => props.theme.contrast};\n  }\n`\n\nWrapper.defaultProps = {\n  theme: {\n    bg: \"white\",\n    contrast: \"black\"\n  }\n}\n\nexport default Wrapper;","/**\n * Generates a random ID based on a random character and the current time\n */\nexport const randomId = () => {\n  let randomLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  return `${randomLetter}-${Date.now()}`;\n}","import styled from 'styled-components';\n\nconst InputPresenter = styled.input`\n  width: calc(100% - 16px);\n  height: 56px;\n  position: relative;\n  padding: 0px 0 0 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: normal;\n  background-color: transparent;\n  color: white;\n  outline: none;\n  -webkit-appearance: none;\n  &::-webkit-input-placeholder{\n    color: white;\n  }\n`\n\nexport default InputPresenter;","import styled from 'styled-components';\n\nconst InputSkin = styled.div`\n  width: 100%;\n  height: 56px;\n  border-radius: 4px;\n  position: relative;\n  background-color: ${props => props.active ? props.theme.secondary : \"rgba(231,86,113, 0.3)\"};\n  margin: 10px 0;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: ${props => props.active ? null: \"rgba(231,86,113, 0.5)\"};\n  }\n`;\n\nexport default InputSkin;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport InputPresenter from \"./Input.presenter\";\nimport InputSkin from './InputSkin';\n\nexport default class InputContainer extends Component {\n\n    static propTypes = {\n        handleUpdate: PropTypes.func.isRequired\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: \"\",\n            active: false\n        }\n    }\n\n    /**\n     * The typical onChange handler for inputs\n     *\n     */\n    handleChange = ({ target }) => {\n        this.setState({\n            value: target.value\n        });\n    };\n\n    /**\n     * Triggers the addTask method when the \"Enter\" key\n     * is pressed\n     *\n     */\n    handleKeyPress = ({ key }) => {\n        if (key === \"Enter\") {\n            this.addTask(this.state.value);\n            this.setState({\n                value: \"\"\n            });\n        }\n    };\n\n    /**\n     * Sends a POST request to the API with a description\n     * of the task as the body. It then triggers the update\n     * handler for the parent so that the List can be updated\n     *\n     * @param {string} description\n     */\n    addTask = (description) => {\n        this.props.handleUpdate(description);\n    };\n\n    handleFocus = () => {\n        this.setState({\n            active: true\n        });\n    }\n\n    handleBlur = () => {\n        this.setState({\n            active: false\n        });\n    }\n\n\n    render() {\n        return (\n            <InputSkin active={this.state.active}>\n                <InputPresenter\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    onKeyPress={this.handleKeyPress}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    placeholder=\"I plan to...\"\n                />\n            </InputSkin>\n        )\n    }\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Droppable} from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n  display: inline-block;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  height: 50vh;\n  overflow-y: scroll;\n`\n\nconst TodoBin = ({id, children}) => (\n    <Droppable droppableId={id} >\n      {provided => (\n        <Container\n          ref={provided.innerRef}\n          {...provided.dropabbleProps}\n        >\n          {children}\n          {provided.placeholder}\n        </Container>\n      )}\n    </Droppable>\n)\n\nTodoBin.propTypes = {\n  id: PropTypes.string.isRequired\n}\n\nexport default TodoBin;","import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n  border-radius: 4px;\n  margin: 10px 0;\n  padding: 10px 10px;\n  background: ${props => props.theme.contrast};\n  color: ${props => props.theme.fontColor};\n  width: calc(100%-12px);\n  overflow: hidden;\n  box-shadow: 0px 6px 8px rgba(164, 164, 164, 0.213825);\n  border-radius: 3px;\n`\n\nContainer.defaultProps = {\n  theme:{\n    contrast: \"white\",\n    fontColor: \"black\"\n  }\n}\n\nconst TodoItem = ({todo, index}) => (\n  <Draggable\n    draggableId={todo.id} index={index}\n  >\n    {provided => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n      >\n        {todo.content}\n      </Container>\n    )}\n  </Draggable>\n)\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    content: PropTypes.string\n  }),\n  index: PropTypes.number\n};\n\nexport default TodoItem;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  @media only screen and (min-width: 1224px){\n    width: 50vw;\n  }\n  @media only screen and (min-width: 320px) and (max-width: 768px){\n    width: 95vw;\n  }\n`;\n\nexport default Container;","export const theme = {\n  primary: \"#1F63E6\",\n  secondary: \"#E75671\",\n  tertiary: \"#454445\",\n  bg: \"#181618\",\n  contrast: \"#FFFFFF\",\n  fontColor: \"#454445\"\n}","import React, { Component } from 'react';\nimport Wrapper from './Components/Wrapper'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { randomId } from './utils/randomIds';\nimport InputContainer from './Components/Input/Input.container';\nimport TodoBin from './Components/TodoBin'\nimport TodoItem from './Components/TodoItem'\nimport Container from './Components/Container';\nimport { ThemeProvider } from 'styled-components'\nimport {theme} from './utils/theme.config';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: {\n        \"xyz\": { id: \"xyz\", content: \"Finish todo app\" }\n      },\n      order: [\"xyz\"],\n    };\n  }\n\n  handleDragEnd = result => {\n    const { draggableId, destination, source } = result;\n    if (!destination) return null;\n    if (destination.index === source.index) return;\n    let newOrder = Array.from(this.state.order);\n    newOrder.splice(source.index, 1);\n    newOrder.splice(destination.index, 0, draggableId);\n    this.setState({\n      order: newOrder\n    });\n  }\n\n  handleClick = () => {\n    this.setState({\n      id: randomId()\n    })\n  };\n\n  handleUpdate = content => {\n    const newTodo = {\n      id: randomId(),\n      content\n    }\n\n    this.setState(prevState => ({\n      todos: {\n        ...prevState.todos,\n        [newTodo.id]: newTodo\n      },\n      order: [newTodo.id, ...prevState.order]\n    }))\n  };\n\n  render() {\n    const { todos, order } = this.state;\n    const todoList = order.map((todoID, i) => <TodoItem todo={todos[todoID]} index={i} key={todoID} />);\n    console.log(theme);\n    return (\n      <ThemeProvider theme={theme}>\n        <Wrapper>\n          <Container>\n            <h1>What are your plans for today?</h1>\n            <InputContainer handleUpdate={this.handleUpdate} />\n            <DragDropContext\n              onDragEnd={this.handleDragEnd}\n            >\n              <TodoBin id=\"todos-1\">\n                {todoList}\n              </TodoBin>\n            </DragDropContext>\n          </Container>\n        </Wrapper>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}