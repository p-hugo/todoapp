{"version":3,"sources":["components/Wrapper.js","utils/randomIds.js","components/Input/Input.presenter.js","components/Input/InputSkin.js","components/Input/index.js","components/TodoBin.js","components/TodoItem.js","components/Container.js","utils/theme.config.js","components/ToggleButton.js","serviceWorker.js","index.js","App.js"],"names":["Wrapper","styled","main","_templateObject","props","theme","bg","contrast","defaultProps","randomId","randomLetter","String","fromCharCode","Math","floor","random","concat","Date","now","InputPresenter","input","Input_presenter_templateObject","InputSkin","div","InputSkin_templateObject","active","secondary","secondaryFade1","secondaryFade2","Input","_ref","handleUpdate","_useState","useState","_useState2","Object","slicedToArray","value","setValue","_useState3","_useState4","setActive","react_default","a","createElement","Input_InputSkin","Input_presenter","onChange","e","target","onKeyPress","_ref2","key","onFocus","onBlur","placeholder","Container","TodoBin_templateObject","TodoBin","id","children","react_beautiful_dnd_esm","droppableId","provided","assign","ref","innerRef","dropabbleProps","TodoItem_templateObject","fontColor","TodoItem","todo","index","draggableId","TodoItem_Container","draggableProps","dragHandleProps","content","Container_templateObject","primary","tertiary","lightTheme","ToggleButton","ToggleButton_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","xyz","todos","setTodos","order","setOrder","_useState5","importedTheme","_useState6","setTheme","todoList","map","todoID","i","components_TodoItem","console","log","styled_components_browser_esm","components_Wrapper","components_Container","components_ToggleButton","onClick","newTodo","objectSpread","defineProperty","toConsumableArray","onDragEnd","result","destination","source","newOrder","Array","from","splice","components_TodoBin","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82c85bdc.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Wrapper = styled.main`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  background: ${props => props.theme.bg};\n  height: 100vh;\n  * {\n    color: ${props => props.theme.contrast};\n  }\n`\n\nWrapper.defaultProps = {\n  theme: {\n    bg: \"white\",\n    contrast: \"black\"\n  }\n}\n\nexport default Wrapper;","/**\n * Generates a random ID based on a random character and the current time\n */\nexport const randomId = () => {\n  let randomLetter = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  return `${randomLetter}-${Date.now()}`;\n}","import styled from 'styled-components';\n\nconst InputPresenter = styled.input`\n  width: calc(100% - 16px);\n  height: 56px;\n  position: relative;\n  padding: 0px 0 0 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: normal;\n  background-color: transparent;\n  color: white;\n  outline: none;\n  -webkit-appearance: none;\n  &::-webkit-input-placeholder{\n    color: white;\n  }\n`\n\nexport default InputPresenter;","import styled from 'styled-components';\n\nconst InputSkin = styled.div`\n  width: 100%;\n  height: 56px;\n  border-radius: 4px;\n  position: relative;\n  background-color: ${props => props.active ? props.theme.secondary : props.theme.secondaryFade1};\n  margin: 10px 0;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: ${props => props.active ? null: props.theme.secondaryFade2};\n  }\n`;\n\nexport default InputSkin;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport InputPresenter from \"./Input.presenter\";\nimport InputSkin from \"./InputSkin\";\n\nexport default function Input({ handleUpdate }) {\n  const [value, setValue] = useState(\"\");\n  const [active, setActive] = useState(\"\");\n\n  /**\n   * Sends the value to the parent component to handle the update\n   * and resets the value of the input.\n   */\n  const handleKeyPress = ({ key }) => {\n    if (key === \"Enter\") {\n      handleUpdate(value);\n      setValue(\"\");\n    }\n  };\n\n  return (\n    <InputSkin active={active}>\n      <InputPresenter\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        onKeyPress={handleKeyPress}\n        onFocus={() => setActive(true)}\n        onBlur={() => setActive(false)}\n        placeholder=\"I plan to...\"\n      />\n    </InputSkin>\n  );\n}\n\nInput.propTypes = {\n  handleUpdate: PropTypes.func\n};\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Droppable} from 'react-beautiful-dnd'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n  display: inline-block;\n  padding: 12px;\n  border: 1px solid lightgray;\n  border-radius: 4px;\n  height: 50vh;\n  overflow-y: scroll;\n`\n\nconst TodoBin = ({id, children}) => (\n    <Droppable droppableId={id} >\n      {provided => (\n        <Container\n          ref={provided.innerRef}\n          {...provided.dropabbleProps}\n        >\n          {children}\n          {provided.placeholder}\n        </Container>\n      )}\n    </Droppable>\n)\n\nTodoBin.propTypes = {\n  id: PropTypes.string.isRequired\n}\n\nexport default TodoBin;","import React from 'react'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n  border-radius: 4px;\n  margin: 10px 0;\n  padding: 10px 10px;\n  background: ${props => props.theme.contrast};\n  color: ${props => props.theme.fontColor};\n  width: calc(100%-12px);\n  overflow: hidden;\n  box-shadow: 0px 6px 8px rgba(164, 164, 164, 0.213825);\n  border-radius: 3px;\n`\n\nContainer.defaultProps = {\n  theme:{\n    contrast: \"white\",\n    fontColor: \"black\"\n  }\n}\n\nconst TodoItem = ({todo, index}) => (\n  <Draggable\n    draggableId={todo.id} index={index}\n  >\n    {provided => (\n      <Container\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        ref={provided.innerRef}\n      >\n        {todo.content}\n      </Container>\n    )}\n  </Draggable>\n)\n\nTodoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.string,\n    content: PropTypes.string\n  }),\n  index: PropTypes.number\n};\n\nexport default TodoItem;","import styled from 'styled-components';\n\nconst Container = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  @media only screen and (min-width: 1224px){\n    width: 50vw;\n  }\n  @media only screen and (min-width: 320px) and (max-width: 768px){\n    width: 95vw;\n  }\n`;\n\nexport default Container;","export const theme = {\n  primary: \"#1F63E6\",\n  secondary: \"#E75671\",\n  secondaryFade1: \"rgba(231,86,113, 0.3)\",\n  secondaryFade2: \"rgba(231,86,113, 0.5)\",\n  tertiary: \"#454445\",\n  bg: \"#181618\",\n  contrast: \"#FFFFFF\",\n  fontColor: \"#454445\"\n}\n\nexport const lightTheme = {\n  primary: \"#E75671\",\n  secondary: \"#1F63E6\",\n  secondaryFade1: \"rgba(31,99,230, 0.3)\",\n  secondaryFade2: \"rgba(31,99,230, 0.5)\",\n  tertiary: \"#454445\",\n  bg: \"#FFFFFF\",\n  contrast: \"#181618\",\n  fontColor: \"#FFFFFF\"\n}","import styled from 'styled-components';\n\nconst ToggleButton = styled.div`\n  position: relative;\n  margin: 10px 0;\n  width: 40px;\n  height: 18px;\n  background: ${props => props.theme.contrast};\n  border-radius: 10px;\n  border: 1px solid transparent;\n  cursor: pointer;\n  transition: all 0.4s;\n  &::before{\n    position: absolute;\n    content: \"\";\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    background: ${({theme}) => theme.primary};\n    top: -2px;\n    left: ${({active}) => active ? \"22px\" : \"-2px\"};\n    transition: all .4s;\n  } \n`\n\nexport default ToggleButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport Wrapper from './components/Wrapper'\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { randomId } from './utils/randomIds';\nimport Input from './components/Input/';\nimport TodoBin from './components/TodoBin'\nimport TodoItem from './components/TodoItem'\nimport Container from './components/Container';\nimport { ThemeProvider } from 'styled-components'\nimport {theme as importedTheme, lightTheme} from './utils/theme.config';\nimport ToggleButton from './components/ToggleButton';\n\nexport default function App() {\n\n  const [todos, setTodos] = useState({\n    \"xyz\": { id: \"xyz\", content: \"Finish todo app\" }\n  });\n  const [order, setOrder] = useState([\"xyz\"]);\n  const [theme, setTheme] = useState(importedTheme);\n\n  const handleDragEnd = result => {\n    const { draggableId, destination, source } = result;\n    if (!destination) return null;\n    if (destination.index === source.index) return;\n    let newOrder = Array.from(order);\n    newOrder.splice(source.index, 1);\n    newOrder.splice(destination.index, 0, draggableId);\n    setOrder(newOrder);\n  }\n\n  const handleUpdate = content => {\n    const newTodo = {\n      id: randomId(),\n      content\n    }\n    setTodos({...todos, [newTodo.id]: newTodo});\n    setOrder([newTodo.id, ...order]);\n  };\n\n  const handleToggle = e => {\n    if(theme === lightTheme){\n      setTheme(importedTheme);\n    }else {\n      setTheme(lightTheme);\n    }\n  }\n\n  const todoList = order.map((todoID, i) => <TodoItem todo={todos[todoID]} index={i} key={todoID} />);\n    console.log(theme);\n    return (\n      <ThemeProvider theme={theme}>\n        <Wrapper>\n          <Container>\n            <p>Change the theme! <ToggleButton active={theme === lightTheme} onClick={handleToggle}/></p>\n            <h1>What are your plans for today?</h1>\n            <Input handleUpdate={handleUpdate} />\n            <DragDropContext\n              onDragEnd={handleDragEnd}\n            >\n              <TodoBin id=\"todos-1\">\n                {todoList}\n              </TodoBin>\n            </DragDropContext>\n          </Container>\n        </Wrapper>\n      </ThemeProvider>\n    );\n}\n"],"sourceRoot":""}